// automatically generated by the FlatBuffers compiler, do not modify

package com.puttysoftware.fantastlereboot.world;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Row extends Table {
  public static Row getRootAsRow(ByteBuffer _bb) { return getRootAsRow(_bb, new Row()); }
  public static Row getRootAsRow(ByteBuffer _bb, Row obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Row __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LayerCake data(int j) { return data(new LayerCake(), j); }
  public LayerCake data(LayerCake obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int dataLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public boolean wraparound() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createRow(FlatBufferBuilder builder,
      int dataOffset,
      boolean wraparound) {
    builder.startObject(2);
    Row.addData(builder, dataOffset);
    Row.addWraparound(builder, wraparound);
    return Row.endRow(builder);
  }

  public static void startRow(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(0, dataOffset, 0); }
  public static int createDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addWraparound(FlatBufferBuilder builder, boolean wraparound) { builder.addBoolean(1, wraparound, false); }
  public static int endRow(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

