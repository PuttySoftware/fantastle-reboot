// automatically generated by the FlatBuffers compiler, do not modify

package com.puttysoftware.fantastlereboot.world;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class GameObject extends Table {
  public static GameObject getRootAsGameObject(ByteBuffer _bb) { return getRootAsGameObject(_bb, new GameObject()); }
  public static GameObject getRootAsGameObject(ByteBuffer _bb, GameObject obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean GameObjectBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "GMOB"); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public GameObject __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int objectId() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public long solidAttributes() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long pushAttributes() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long pullAttributes() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean solidInside() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean solidOutside() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean pushable() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean pullable() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean friction() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean canDestroy() { int o = __offset(22); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean canChainReact() { int o = __offset(24); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int chainReactionAttributes() { int o = __offset(26); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean canCarry() { int o = __offset(28); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean canUse() { int o = __offset(30); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int maximumUses() { int o = __offset(32); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean canSeeThrough() { int o = __offset(34); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean isToggleSwitch() { int o = __offset(36); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int toggleTarget1() { int o = __offset(38); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public int toggleTarget2() { int o = __offset(40); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean onToggleDestroySwitch() { int o = __offset(42); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean canControl() { int o = __offset(44); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean hasContents() { int o = __offset(46); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int contents(int j) { int o = __offset(48); return o != 0 ? bb.getShort(__vector(o) + j * 2) & 0xFFFF : 0; }
  public int contentsLength() { int o = __offset(48); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer contentsAsByteBuffer() { return __vector_as_bytebuffer(48, 2); }
  public ByteBuffer contentsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 2); }
  public boolean isKey() { int o = __offset(50); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean isLock() { int o = __offset(52); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int requiredKey() { int o = __offset(54); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public int requiredKeyCount() { int o = __offset(56); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 1; }
  public boolean onUnlockConsumeKey() { int o = __offset(58); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean onUnlockDestroyLock() { int o = __offset(60); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean isTriggerSwitch() { int o = __offset(62); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int triggerTarget() { int o = __offset(64); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean onTriggerDestroySwitch() { int o = __offset(66); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean isTeleporter() { int o = __offset(68); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public Vector3 teleporterDestination() { return teleporterDestination(new Vector3()); }
  public Vector3 teleporterDestination(Vector3 obj) { int o = __offset(70); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public boolean isTeleporterDestinationRelative() { int o = __offset(72); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean hasRandomRange() { int o = __offset(74); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public RandomRange randomRange() { return randomRange(new RandomRange()); }
  public RandomRange randomRange(RandomRange obj) { int o = __offset(76); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public boolean canMove() { int o = __offset(78); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean destroyedOnCollision() { int o = __offset(80); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static void startGameObject(FlatBufferBuilder builder) { builder.startObject(39); }
  public static void addObjectId(FlatBufferBuilder builder, int objectId) { builder.addShort(0, (short)objectId, (short)0); }
  public static void addSolidAttributes(FlatBufferBuilder builder, long solidAttributes) { builder.addInt(1, (int)solidAttributes, (int)0L); }
  public static void addPushAttributes(FlatBufferBuilder builder, long pushAttributes) { builder.addInt(2, (int)pushAttributes, (int)0L); }
  public static void addPullAttributes(FlatBufferBuilder builder, long pullAttributes) { builder.addInt(3, (int)pullAttributes, (int)0L); }
  public static void addSolidInside(FlatBufferBuilder builder, boolean solidInside) { builder.addBoolean(4, solidInside, false); }
  public static void addSolidOutside(FlatBufferBuilder builder, boolean solidOutside) { builder.addBoolean(5, solidOutside, false); }
  public static void addPushable(FlatBufferBuilder builder, boolean pushable) { builder.addBoolean(6, pushable, false); }
  public static void addPullable(FlatBufferBuilder builder, boolean pullable) { builder.addBoolean(7, pullable, false); }
  public static void addFriction(FlatBufferBuilder builder, boolean friction) { builder.addBoolean(8, friction, true); }
  public static void addCanDestroy(FlatBufferBuilder builder, boolean canDestroy) { builder.addBoolean(9, canDestroy, true); }
  public static void addCanChainReact(FlatBufferBuilder builder, boolean canChainReact) { builder.addBoolean(10, canChainReact, false); }
  public static void addChainReactionAttributes(FlatBufferBuilder builder, int chainReactionAttributes) { builder.addShort(11, (short)chainReactionAttributes, (short)0); }
  public static void addCanCarry(FlatBufferBuilder builder, boolean canCarry) { builder.addBoolean(12, canCarry, false); }
  public static void addCanUse(FlatBufferBuilder builder, boolean canUse) { builder.addBoolean(13, canUse, false); }
  public static void addMaximumUses(FlatBufferBuilder builder, int maximumUses) { builder.addByte(14, (byte)maximumUses, (byte)0); }
  public static void addCanSeeThrough(FlatBufferBuilder builder, boolean canSeeThrough) { builder.addBoolean(15, canSeeThrough, true); }
  public static void addIsToggleSwitch(FlatBufferBuilder builder, boolean isToggleSwitch) { builder.addBoolean(16, isToggleSwitch, false); }
  public static void addToggleTarget1(FlatBufferBuilder builder, int toggleTarget1) { builder.addShort(17, (short)toggleTarget1, (short)0); }
  public static void addToggleTarget2(FlatBufferBuilder builder, int toggleTarget2) { builder.addShort(18, (short)toggleTarget2, (short)0); }
  public static void addOnToggleDestroySwitch(FlatBufferBuilder builder, boolean onToggleDestroySwitch) { builder.addBoolean(19, onToggleDestroySwitch, false); }
  public static void addCanControl(FlatBufferBuilder builder, boolean canControl) { builder.addBoolean(20, canControl, false); }
  public static void addHasContents(FlatBufferBuilder builder, boolean hasContents) { builder.addBoolean(21, hasContents, false); }
  public static void addContents(FlatBufferBuilder builder, int contentsOffset) { builder.addOffset(22, contentsOffset, 0); }
  public static int createContentsVector(FlatBufferBuilder builder, short[] data) { builder.startVector(2, data.length, 2); for (int i = data.length - 1; i >= 0; i--) builder.addShort(data[i]); return builder.endVector(); }
  public static void startContentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(2, numElems, 2); }
  public static void addIsKey(FlatBufferBuilder builder, boolean isKey) { builder.addBoolean(23, isKey, false); }
  public static void addIsLock(FlatBufferBuilder builder, boolean isLock) { builder.addBoolean(24, isLock, false); }
  public static void addRequiredKey(FlatBufferBuilder builder, int requiredKey) { builder.addShort(25, (short)requiredKey, (short)0); }
  public static void addRequiredKeyCount(FlatBufferBuilder builder, int requiredKeyCount) { builder.addByte(26, (byte)requiredKeyCount, (byte)1); }
  public static void addOnUnlockConsumeKey(FlatBufferBuilder builder, boolean onUnlockConsumeKey) { builder.addBoolean(27, onUnlockConsumeKey, true); }
  public static void addOnUnlockDestroyLock(FlatBufferBuilder builder, boolean onUnlockDestroyLock) { builder.addBoolean(28, onUnlockDestroyLock, true); }
  public static void addIsTriggerSwitch(FlatBufferBuilder builder, boolean isTriggerSwitch) { builder.addBoolean(29, isTriggerSwitch, false); }
  public static void addTriggerTarget(FlatBufferBuilder builder, int triggerTarget) { builder.addShort(30, (short)triggerTarget, (short)0); }
  public static void addOnTriggerDestroySwitch(FlatBufferBuilder builder, boolean onTriggerDestroySwitch) { builder.addBoolean(31, onTriggerDestroySwitch, true); }
  public static void addIsTeleporter(FlatBufferBuilder builder, boolean isTeleporter) { builder.addBoolean(32, isTeleporter, false); }
  public static void addTeleporterDestination(FlatBufferBuilder builder, int teleporterDestinationOffset) { builder.addStruct(33, teleporterDestinationOffset, 0); }
  public static void addIsTeleporterDestinationRelative(FlatBufferBuilder builder, boolean isTeleporterDestinationRelative) { builder.addBoolean(34, isTeleporterDestinationRelative, false); }
  public static void addHasRandomRange(FlatBufferBuilder builder, boolean hasRandomRange) { builder.addBoolean(35, hasRandomRange, false); }
  public static void addRandomRange(FlatBufferBuilder builder, int randomRangeOffset) { builder.addStruct(36, randomRangeOffset, 0); }
  public static void addCanMove(FlatBufferBuilder builder, boolean canMove) { builder.addBoolean(37, canMove, false); }
  public static void addDestroyedOnCollision(FlatBufferBuilder builder, boolean destroyedOnCollision) { builder.addBoolean(38, destroyedOnCollision, false); }
  public static int endGameObject(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishGameObjectBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "GMOB"); }
  public static void finishSizePrefixedGameObjectBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "GMOB"); }
}

